{
	"Print to console": {
		"prefix": "atcoder java",
		"body": [
			"import java.util.*;",
			"",
			"public class ${TM_FILENAME_BASE} {",
			"    public static void main(String[] args) {",
			"",
			"        InputHandler in = new InputHandler();",
			"",
			"        in.close();",
			"",
			"    }",
			"",
			"    private static class InputHandler {",
			"        private Scanner sc = new Scanner(System.in);",
			"        private void close() {this.sc.close();}",
			"        private int nextInt() {return this.sc.nextInt();}",
			"        private long nextLong() {return this.sc.nextLong();}",
			"        private String nextStr() {return this.sc.next();}",
			"        private int[] nextIntArray(int size) {",
			"            int[] array = new int[size];",
			"            for (int i = 0; i < size; i++) array[i] = this.sc.nextInt();",
			"            return array;",
			"        }",
			"        private int[][] nextIntArray(int size1, int size2) {",
			"           int[][] array = new int[size1][size2];",
			"           for (int i = 0; i < size1; i++) array[i] = nextIntArray(size2);",
			"           return array;",
			"        }",
			"        private long[] nextLongArray(int size) {",
			"            long[] array = new long[size];",
			"            for (int i = 0; i < size; i++) array[i] = this.sc.nextLong();",
			"            return array;",
			"        }",
			"        private String[] nextStrArray(int size) {",
			"            List<String> list = new ArrayList<>();",
			"            for (int i = 0; i < size; i++) list.add(this.sc.next());",
			"            return list.toArray(new String[size]);",
			"        }",
			"    }",
			"}"
		],
		"description": "a template for using java in atcoder"
	},

	"Permitation": {
		"prefix": "permitation java",
		"body": [
			"",
			"private static class Permutation {",
			"",
			"    private static <T> void swap(T[] array, int m, int n) {",
			"        T temp = array[m]; array[m] = array[n]; array[n] = temp;",
			"    }",
			"",
			"    private static <T extends Comparable<T>> boolean prevPermutation(T[] array) {",
			"        return prevPermutation(array, java.util.Comparator.naturalOrder());",
			"    }",
			"",
			"    private static <T> boolean prevPermutation(T[] array, java.util.Comparator<T> comparator) {",
			"        if (array == null | array.length <= 1) return false;",
			"",
			"        for (int change = array.length - 2; change >= 0; --change) {",
			"            if (comparator.compare(array[change], array[change + 1]) > 0) {",
			"                int min = change, max = array.length, halfDiff, mid;",
			"                while ((halfDiff = max - min >> 1) != 0) {",
			"                    if (comparator.compare(array[change], array[mid = min + halfDiff]) > 0) min = mid;",
			"                    else max = mid;",
			"                }",
			"                swap(array, change, min);",
			"                for (min = change + 1, max = array.length - 1; min < max; ++min, --max) swap(array, min, max);",
			"                return true;",
			"            }",
			"        }",
			"        return false;",
			"    }",
			"}",
			""
		],
		"description": "util class for Permitation on java"
	},

	"MathUtils": {
		"prefix": "mathUtils java",
		"body": [
			"private static class MathUtils {",
			"    private long mod(long dividend, long divisor) {",
			"        return (Math.floorMod(dividend, divisor) + Math.abs(divisor)) % Math.abs(divisor);",
			"    }",
			"",
			"    private long gcd(long a, long b) {",
			"        long dividend = Math.max(a, b);",
			"        long divisor  = Math.min(a, b);",
			"        dividend = mod(dividend, divisor);",
			"",
			"        if (dividend == 0) return divisor;",
			"        return gcd(dividend, divisor);",
			"    }",
			"",
			"    private static long factorial(int n) {",
			"        if (n == 0 || n == 1) return 1;",
			"        return n * factorial(n-1);",
			"    }",
			"}"
		],
		"description": "util class for Some Mathematics on java"
	},
	"number of data sets": {
		"prefix": "nm java",
		"body": [
			"int n = io.nextInt();",
			"int m = io.nextInt();"
		],
		"description": ""
	},
	"for-roop n times": {
		"prefix": "forn",
		"body": [
			"for (int i = 0; i < n; i++) {",
			"    ",
			"}"
		],
		"description": ""
	},
	"declare and read n times array a/b": {
		"prefix": "ab of array",
		"body": [
			"int[] a = new int[n];",
			"int[] b = new int[n];",
			"for (int i = 0; i < n; i++) {",
			"    a[i] = io.nextInt();",
			"    b[i] = io.nextInt();",
			"}"
		],
		"description": ""
	},
	"declare simple graph": {
		"prefix": "graph",
		"body": [
			"var graph = new ArrayList<List<Integer>>();",
			"for (int i = 0; i < n; i++) graph.add(new ArrayList<>());",
			"for (int i = 0; i < n; i++) {",
			"    int a = io.nextInt()-1;",
			"    int b = io.nextInt()-1;",
			"    graph.get(a).add(b);",
			"    graph.get(b).add(a);",
			"}"
		],
		"description": ""
	}
}